name: Backend CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: wallzen_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Linting
        run: npm run lint

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wallzen_test

      - name: Run Tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/wallzen_test
          NODE_ENV: test

      - name: Build Application
        run: npm run build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: dist
          retention-days: 7

  release:
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: dist

      - name: Get Current Date
        id: date
        run: echo "date=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Backend Release v${{ github.run_number }}
          body: |
            🚀 Backend Release v${{ github.run_number }}
            
            📅 Release Date: ${{ steps.date.outputs.date }}
            👤 Released by: ${{ github.actor }}
            
            📝 Changes:
            ${{ github.event.head_commit.message }}
            
            🔗 Commit: ${{ github.sha }}
          draft: false
          prerelease: false